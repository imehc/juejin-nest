openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /aaa:
    get:
      operationId: AppController_aaaa
      parameters: []
      responses:
        '200':
          description: ''
  /bbb:
    get:
      operationId: AppController_bbb
      parameters: []
      responses:
        '200':
          description: ''
  /user/register-captcha:
    get:
      operationId: register-captcha
      summary: 获取注册验证码
      tags:
        - captcha
      parameters:
        - name: address
          required: true
          in: query
          description: 邮箱地址
          example: xxx@xx.com
          schema:
            type: string
      responses:
        '200':
          description: 发送成功
          content:
            application/json:
              schema:
                type: string
        '400':
          description: 邮箱已存在
          content:
            application/json:
              schema:
                type: string
  /user/forgot-password-captcha:
    get:
      operationId: fotgot-captcha
      summary: 获取找回密码验证码
      tags:
        - captcha
      parameters:
        - name: address
          required: true
          in: query
          description: 邮箱地址
          example: xxx@xx.com
          schema:
            type: string
      responses:
        '200':
          description: 发送成功
          content:
            application/json:
              schema:
                type: string
  /user/update-password/captcha:
    get:
      operationId: update-password-captcha
      summary: 获取更改密码验证码
      tags:
        - captcha
      parameters: []
      responses:
        '200':
          description: 发送成功
          content:
            application/json:
              schema:
                type: string
      security:
        - bearer: []
  /user/update/captcha:
    get:
      operationId: update-user-info-captcha
      summary: 获取更新用户信息验证码
      tags:
        - captcha
        - user
      parameters: []
      responses:
        '200':
          description: 发送成功
          content:
            application/json:
              schema:
                type: string
      security:
        - bearer: []
  /user/register:
    post:
      operationId: user-register
      summary: 注册用户
      tags:
        - user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserDto'
      responses:
        '200':
          description: 注册成功
          content:
            application/json:
              schema:
                type: string
        '400':
          description: 验证码已失效/验证码不正确/用户已存在
          content:
            application/json:
              schema:
                type: string
  /user/login:
    post:
      operationId: user-login
      summary: 普通用户登录
      tags:
        - user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        '200':
          description: 用户信息和token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserVo'
        '400':
          description: 用户不存在/密码错误
          content:
            application/json:
              schema:
                type: string
  /user/admin/login:
    post:
      operationId: system-login
      summary: 管理员登录
      tags:
        - user
        - system
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        '200':
          description: 用户信息和token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserVo'
        '400':
          description: 用户不存在/密码错误
          content:
            application/json:
              schema:
                type: string
  /user/refresh:
    get:
      operationId: refresh-token
      summary: 使用refreshToken换取新token
      tags:
        - auth
      parameters:
        - name: refreshToken
          required: true
          in: query
          description: 刷新token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
          schema:
            type: string
      responses:
        '200':
          description: 刷新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'
        '401':
          description: token 已失效，请重新登录
          content:
            application/json:
              schema:
                type: string
  /user/info:
    get:
      operationId: get-user-info
      summary: 获取用户/管理员信息
      tags:
        - user
        - system
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/UserDetailVo'
                  - $ref: '#/components/schemas/UserInfo'
                discriminator:
                  propertyName: type
                  mapping:
                    system: UserInfo
                    normal: UserDetailVo
      security:
        - bearer: []
  /user/forgot-password:
    post:
      operationId: forgot-password
      summary: 用户忘记密码
      tags:
        - user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotUserPasswordDto'
      responses:
        '200':
          description: 找回密码成功
          content:
            application/json:
              schema:
                type: string
        '400':
          description: 验证码已失效/不正确
          content:
            application/json:
              schema:
                type: string
  /user/update-password:
    post:
      operationId: update-password
      summary: 用户/管理员更新密码
      tags:
        - user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPasswordDto'
      responses:
        '200':
          description: 用户/管理员更新密码
          content:
            application/json:
              schema:
                type: string
        '400':
          description: 验证码已失效/不正确
          content:
            application/json:
              schema:
                type: string
      security:
        - bearer: []
  /user/update:
    post:
      operationId: update-user-info
      summary: 用户/管理员更新用户/管理员信息
      tags:
        - user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: string
        '400':
          description: 验证码不正确/已失效
          content:
            application/json:
              schema:
                type: string
      security:
        - bearer: []
  /user/freeze/{id}:
    put:
      operationId: freeze-user
      summary: 冻结用户
      tags:
        - system
      parameters:
        - name: id
          required: true
          in: path
          description: 冻结用户的用户ID
          schema:
            type: number
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: string
      security:
        - bearer: []
  /user/list:
    get:
      operationId: get-user-list
      summary: 用户列表
      tags:
        - user
      parameters:
        - name: skip
          required: true
          in: query
          description: 第几页
          schema:
            type: number
        - name: limit
          required: true
          in: query
          description: 每页多少条
          schema:
            type: number
        - name: username
          required: false
          in: query
          description: 用户名
          schema:
            type: string
        - name: nickName
          required: false
          in: query
          description: 昵称
          schema:
            type: string
        - name: email
          required: false
          in: query
          description: 邮箱地址
          schema:
            type: string
      responses:
        '200':
          description: 用户列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListVo'
      security:
        - bearer: []
  /user/upload:
    post:
      operationId: uploadPicture
      summary: 上传图片
      tags:
        - user
        - file
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: string
      security:
        - bearer: []
  /user/init-data:
    get:
      operationId: UserController_initData
      summary: ''
      deprecated: true
      parameters: []
      responses:
        '200':
          description: ''
info:
  title: 会议室预订系统
  description: api 接口文档
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: http://localhost:6020
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: 基于jwt的认证
  schemas:
    RegisterUserDto:
      type: object
      properties:
        username:
          type: string
        nickName:
          type: string
        password:
          type: string
        email:
          type: string
        captcha:
          type: number
      required:
        - username
        - nickName
        - password
        - email
        - captcha
    LoginUserDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    Permission:
      type: object
      properties:
        id:
          type: number
        code:
          type: string
          example: ccc
        description:
          type: string
          example: 访问 ccc 接口
      required:
        - id
        - code
        - description
    UserInfo:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
          example: zhangsan
        nickName:
          type: string
          example: 张三
        email:
          type: string
          example: xx@xx.com
        headPic:
          type: string
          example: xxx.png
        phoneNumber:
          type: string
          example: '13233333333'
        isFrozen:
          type: boolean
        isAdmin:
          type: boolean
        createAt:
          format: date-time
          type: string
        roles:
          example:
            - 管理员
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
      required:
        - id
        - username
        - nickName
        - email
        - headPic
        - phoneNumber
        - isFrozen
        - isAdmin
        - createAt
        - roles
        - permissions
    Auth:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        expiresIn:
          type: number
          example: '1800000'
      required:
        - accessToken
        - refreshToken
        - expiresIn
    LoginUserVo:
      type: object
      properties:
        userInfo:
          deprecated: true
          description: 用户信息
          allOf:
            - $ref: '#/components/schemas/UserInfo'
        auth:
          $ref: '#/components/schemas/Auth'
      required:
        - userInfo
        - auth
    UserDetailVo:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        nickName:
          type: string
        email:
          type: string
        headPic:
          type: string
        phoneNumber:
          type: string
        isFrozen:
          type: boolean
        createAt:
          format: date-time
          type: string
        isAdmin:
          type: boolean
      required:
        - id
        - username
        - email
        - phoneNumber
        - isFrozen
        - createAt
    ForgotUserPasswordDto:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        captcha:
          type: number
      required:
        - username
        - password
        - email
        - captcha
    UpdateUserPasswordDto:
      type: object
      properties:
        password:
          type: string
        captcha:
          type: number
      required:
        - password
        - captcha
    UpdateUserDto:
      type: object
      properties:
        headPic:
          type: string
        nickName:
          type: string
        captcha:
          type: number
      required:
        - captcha
    User:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        nickName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        isFrozen:
          type: boolean
        headPic:
          type: string
        createAt:
          format: date-time
          type: string
      required:
        - id
        - username
        - nickName
        - email
        - phoneNumber
        - isFrozen
        - headPic
        - createAt
    UserListVo:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        totalCount:
          type: number
      required:
        - users
        - totalCount
