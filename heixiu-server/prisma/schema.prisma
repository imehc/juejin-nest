// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id       Int      @id @default(autoincrement())
  username String   @db.VarChar(50)
  password String   @db.VarChar(50)
  nickname String   @map("nickname") @db.VarChar(50)
  email    String   @unique @db.VarChar(50)
  headPic  String   @default("") @map("head_pic") @db.VarChar(100)
  createAt DateTime @default(now()) @map("created_at")
  updateAt DateTime @updatedAt @map("updated_at")

  friends        Friendship[] @relation("user_to_friend") // user的好友
  inverseFriends Friendship[] @relation("friend_to_user") // user是那些人的好友高

  @@map("users")
}

// 好友
model Friendship {
  user   User @relation("user_to_friend", fields: [userId], references: [id])
  userId Int  @map("user_id")

  friend   User @relation("friend_to_user", fields: [friendId], references: [id])
  friendId Int  @map("friend_id")

  @@id([userId, friendId])
  @@map("friendships")
}

enum FriendRequestStatus {
  PENDING // 待处理
  ACCEPTED // 已同意
  REJECTED // 已拒绝

  @@map("friend_request_status")
}

// 好友申请
model FriendRequest {
  id         Int                 @id @default(autoincrement())
  // 请求发送方
  fromUserId Int                 @map("from_user_id")
  // 待添加好友
  toUserId   Int                 @map("to_user_id")
  // 添加理由
  reason     String              @db.VarChar(100)
  // 状态 
  status     FriendRequestStatus @default(PENDING)
  createAt   DateTime            @default(now()) @map("created_at")
  updateAt   DateTime            @updatedAt @map("updated_at")

  @@map("friend_requests")
}

enum ChatroomType {
  SINGLE // 单聊
  MULTIPLE // 群聊

  @@map("chatroom_type")
}

// 聊天室
model Chatroom {
  id       Int          @id @default(autoincrement())
  name     String       @db.VarChar(50)
  type     ChatroomType @default(SINGLE)
  createAt DateTime     @default(now()) @map("created_at")
  updateAt DateTime     @updatedAt @map("updated_at")

  @@map("chatrooms")
}

// 聊天室成员 成员在那些聊天室
model UserChatroom {
  userId     Int @map("user_id")
  chatroomId Int @map("chatroom_id")

  @@id([userId, chatroomId])
  @@map("user_chatrooms")
}

enum UniqueCodeStatus {
  USED // 已使用
  UNUSED // 未使用

  @@map("unique_code_status")
}

// 唯一码
model UniqueCode {
  id     Int              @id @default(autoincrement())
  code   String           @unique @db.VarChar(10)
  status UniqueCodeStatus @default(UNUSED)

  @@map("unique_codes")
}

model ShortLongMap {
  id         Int    @id @default(autoincrement())
  shortUrl   String @unique @map("short_url") @db.VarChar(10)
  longUrl    String @map("long_url") @db.VarChar(200)
  visitCount Int    @default(0) @map("visit_count")

  createAt DateTime @default(now()) @map("created_at")

  @@map("short_long_maps")
}
